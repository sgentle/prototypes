// Generated by CoffeeScript 1.10.0
(function() {
  var El, KEYNOTES, LOWNOTE, NOTEBASE, NOTERANGE, NOTES, SvgEl, addNote, audioContext, compressorNode, container, noteToFreq, notes, parseNote, playingnotes, update;

  El = function(name, attribs) {
    var el, k, v;
    if (attribs == null) {
      attribs = {};
    }
    el = document.createElement(name);
    for (k in attribs) {
      v = attribs[k];
      el.setAttribute(k, v);
    }
    return el;
  };

  SvgEl = function(name, attribs, content) {
    var el, k, v;
    if (attribs == null) {
      attribs = {};
    }
    el = document.createElementNS('http://www.w3.org/2000/svg', name);
    for (k in attribs) {
      v = attribs[k];
      el.setAttribute(k, v);
    }
    if (content) {
      el.textContent = content;
    }
    return el;
  };

  NOTES = {
    C: 261.63,
    'C#': 277.18,
    Db: 277.18,
    D: 293.66,
    'D#': 311.13,
    Eb: 311.13,
    E: 329.63,
    F: 349.23,
    'F#': 369.99,
    Gb: 369.99,
    G: 392.00,
    'G#': 415.30,
    A: 440.00,
    'A#': 466.16,
    Bb: 466.16,
    B: 493.88
  };

  NOTEBASE = 4;

  LOWNOTE = NOTES.C;

  NOTERANGE = NOTES.B - NOTES.C;

  KEYNOTES = {
    KeyA: 'C4',
    KeyW: 'C#4',
    KeyS: 'D4',
    KeyE: 'D#4',
    KeyD: 'E4',
    KeyF: 'F4',
    KeyT: 'F#4',
    KeyG: 'G4',
    KeyY: 'G#4',
    KeyH: 'A4',
    KeyU: 'A#4',
    KeyJ: 'B4',
    KeyK: 'C5',
    KeyO: 'C#5',
    KeyL: 'D5',
    KeyP: 'D#5',
    Semicolon: 'E5',
    Quote: 'F5'
  };

  parseNote = function(str) {
    var match, name, octave;
    match = str.match(/^(\w[b#]?)(\d*)$/) || ['', 'C', 4];
    name = match[1];
    octave = parseInt(match[2]) || 4;
    return {
      name: name,
      octave: octave
    };
  };

  noteToFreq = (function(_this) {
    return function(n) {
      return NOTES[n.name] * Math.pow(2, n.octave - NOTEBASE);
    };
  })(this);

  audioContext = new (AudioContext || webkitAudioContext);

  compressorNode = audioContext.createDynamicsCompressor();

  compressorNode.connect(audioContext.destination);

  notes = [];

  container = document.querySelector('neural-notes');

  update = function() {
    return container.innerHTML = notes.map(function(x) {
      return x.name;
    }).join('<br>');
  };

  addNote = function(note, freq) {
    note.freq = freq;
    notes.push(note);
    return update();
  };

  playingnotes = {};

  document.addEventListener('keyup', function(ev) {
    var at, note, notename;
    if (!(notename = KEYNOTES[ev.code])) {
      return;
    }
    if (!(note = playingnotes[notename])) {
      return;
    }
    at = audioContext.currentTime;
    note.gain.gain.exponentialRampToValueAtTime(0.00001, at + 0.1);
    note.osc.stop(at + 0.1);
    console.log('keyup', ev.code, note);
    return delete playingnotes[notename];
  });

  document.addEventListener('keydown', function(ev) {
    var at, freq, gain, note, notename, osc, wavelength;
    if (!(notename = KEYNOTES[ev.code])) {
      return;
    }
    if (!(note = parseNote(notename))) {
      return;
    }
    if (playingnotes[notename]) {
      return;
    }
    freq = noteToFreq(note);
    wavelength = 1 / freq;
    console.log('keydown', ev.code, note, freq, wavelength);
    osc = audioContext.createOscillator();
    osc.frequency.value = freq;
    gain = audioContext.createGain();
    gain.gain.value = 0.00001;
    osc.connect(gain);
    gain.connect(compressorNode);
    at = audioContext.currentTime;
    osc.start(at);
    gain.gain.exponentialRampToValueAtTime(1, at + 0.01);
    playingnotes[notename] = {
      osc: osc,
      gain: gain,
      freq: freq,
      at: at
    };
    return addNote(note, freq);
  });

}).call(this);
