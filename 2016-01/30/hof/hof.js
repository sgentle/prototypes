// Generated by CoffeeScript 1.10.0
(function() {
  var $, $$, cloneContents, el, getContents, hofOf, hofOver, i, j, len, len1, ref, ref1;

  $ = document.querySelector.bind(document);

  $$ = document.querySelectorAll.bind(document);

  getContents = function(el) {
    var range;
    range = document.createRange();
    range.selectNodeContents(el);
    return range.extractContents();
  };

  cloneContents = function(el) {
    var range;
    range = document.createRange();
    range.selectNodeContents(el);
    return range.cloneContents();
  };

  hofOf = function(el) {
    var contents, field, listener;
    field = el.getAttribute('field');
    contents = getContents(el);
    el.innerHTML = field;
    listener = function() {
      return el.parentNode.replaceChild(contents, el);
    };
    return el.addEventListener('click', listener);
  };

  hofOver = function(el) {
    var definitions, expandAll, fn, hof, hofOpener, hout, i, j, l, len, len1, len2, len3, m, names, outputs, ref, ref1, ref2, ref3, t, updateOutputs;
    definitions = {};
    ref = el.querySelectorAll('hof-of');
    for (i = 0, len = ref.length; i < len; i++) {
      hof = ref[i];
      definitions[hof.getAttribute('field')] = cloneContents(hof);
    }
    names = {};
    ref1 = el.querySelectorAll('hof-on');
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      t = ref1[j];
      names[t.innerHTML] = true;
    }
    outputs = [];
    ref2 = el.querySelectorAll('hof-output');
    fn = function(hout) {
      var fun;
      fun = new Function(Object.keys(names), 'return ' + hout.getAttribute('function'));
      return outputs.push(function(counts) {
        return hout.innerHTML = fun.apply(null, counts);
      });
    };
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      hout = ref2[l];
      fn(hout);
    }
    updateOutputs = function() {
      var counts, countsList, hon, k, key, len3, len4, len5, m, n, o, out, ref3, ref4, results, v;
      counts = {};
      for (k in names) {
        counts[k] = 0;
      }
      ref3 = el.querySelectorAll('hof-on');
      for (m = 0, len3 = ref3.length; m < len3; m++) {
        hon = ref3[m];
        key = hon.innerHTML;
        if (counts[key] != null) {
          counts[key]++;
        }
      }
      ref4 = el.querySelectorAll('hof-of');
      for (n = 0, len4 = ref4.length; n < len4; n++) {
        hof = ref4[n];
        key = hof.getAttribute('field');
        if (counts[key]) {
          counts[key]++;
        }
      }
      countsList = (function() {
        var results;
        results = [];
        for (k in counts) {
          v = counts[k];
          results.push(v);
        }
        return results;
      })();
      results = [];
      for (o = 0, len5 = outputs.length; o < len5; o++) {
        out = outputs[o];
        results.push(out(countsList));
      }
      return results;
    };
    setTimeout(updateOutputs, 0);
    expandAll = function() {
      var hofs, len3, m, replacement;
      hofs = el.querySelectorAll('hof-of');
      if (hofs.length === 0) {
        return;
      }
      for (m = 0, len3 = hofs.length; m < len3; m++) {
        hof = hofs[m];
        if (replacement = definitions[hof.getAttribute('field')]) {
          hof.parentNode.replaceChild(replacement.cloneNode(true), hof);
        }
      }
      return expandAll();
    };
    ref3 = el.querySelectorAll('hof-open-full');
    for (m = 0, len3 = ref3.length; m < len3; m++) {
      hofOpener = ref3[m];
      hofOpener.addEventListener('click', expandAll);
    }
    return el.addEventListener('click', function(ev) {
      var clone, len4, len5, len6, n, newel, o, oldel, p, ref4, ref5, ref6, replacement, results, subEl;
      updateOutputs();
      if (el.querySelector('hof-of')) {
        return;
      }
      if (el.hasAttribute('factory')) {
        clone = el.cloneNode(true);
        ref4 = clone.querySelectorAll('hof-open-full');
        for (n = 0, len4 = ref4.length; n < len4; n++) {
          subEl = ref4[n];
          subEl.remove();
        }
        el.parentNode.insertBefore(clone, el);
      }
      ref5 = el.querySelectorAll('hof-on');
      results = [];
      for (o = 0, len5 = ref5.length; o < len5; o++) {
        oldel = ref5[o];
        if (replacement = definitions[oldel.innerHTML]) {
          newel = document.createElement('hof-of');
          newel.setAttribute('field', oldel.innerHTML);
          newel.appendChild(replacement.cloneNode(true));
          ref6 = newel.querySelectorAll('hof-of');
          for (p = 0, len6 = ref6.length; p < len6; p++) {
            subEl = ref6[p];
            hofOf(subEl);
          }
          hofOf(newel);
          results.push(oldel.parentNode.replaceChild(newel, oldel));
        } else {
          results.push(void 0);
        }
      }
      return results;
    });
  };

  ref = $$('hof-over');
  for (i = 0, len = ref.length; i < len; i++) {
    el = ref[i];
    hofOver(el);
  }

  ref1 = $$('hof-of');
  for (j = 0, len1 = ref1.length; j < len1; j++) {
    el = ref1[j];
    hofOf(el);
  }

}).call(this);
