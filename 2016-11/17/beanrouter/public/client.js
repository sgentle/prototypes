// Generated by CoffeeScript 1.11.1
(function() {
  var $, addBean, beancontainer, beans, connect, i, k, len, logBean, ref, sock, updateBean;

  $ = document.querySelector.bind(document);

  sock = null;

  connect = function() {
    console.log("connected");
    sock = new WebSocket("ws://" + location.hostname + "/beans");
    sock.onconnected = function() {
      return console.log("connected");
    };
    sock.onmessage = function(e) {
      var msg;
      console.log("message", e.data);
      msg = JSON.parse(e.data);
      if (msg.type === 'update') {
        return updateBean(msg.bean, msg.data);
      } else if (msg.type === 'log') {
        return logBean(msg.bean, msg.message);
      }
    };
    return sock.onclose = function() {
      sock = null;
      console.log("Reconnecting...");
      return setTimeout(connect, 1000);
    };
  };

  connect();

  $('#rescanbutton').addEventListener('click', function() {
    return sock.send(JSON.stringify({
      type: 'rescan'
    }));
  });

  $('#restartbutton').addEventListener('click', function() {
    return sock.send(JSON.stringify({
      type: 'restart'
    }));
  });

  beans = {};

  beancontainer = $('#beancontainer');

  addBean = function(id) {
    var buttonContainer, data, disconnect, log, root, trigger;
    root = document.createElement('div');
    root.innerHTML = id;
    root.className = 'bean';
    data = document.createElement('div');
    data.className = 'data';
    root.appendChild(data);
    log = document.createElement('div');
    log.className = 'log';
    root.appendChild(log);
    buttonContainer = document.createElement('div');
    buttonContainer.className = 'button-container';
    root.appendChild(buttonContainer);
    disconnect = document.createElement('button');
    disconnect.innerHTML = "Disconnect";
    disconnect.addEventListener('click', function() {
      return sock.send(JSON.stringify({
        type: 'disconnect',
        bean: id
      }));
    });
    buttonContainer.appendChild(disconnect);
    trigger = document.createElement('button');
    trigger.innerHTML = "Trigger";
    trigger.addEventListener('click', function() {
      return sock.send(JSON.stringify({
        type: 'trigger',
        bean: id
      }));
    });
    buttonContainer.appendChild(trigger);
    beancontainer.appendChild(root);
    return beans[id] = {
      root: root,
      data: data,
      log: log,
      buttonContainer: buttonContainer,
      buttons: {
        disconnect: disconnect,
        trigger: trigger
      }
    };
  };

  updateBean = function(id, data) {
    var bean, k, v;
    bean = beans[id];
    bean.data.innerHTML = ((function() {
      var results;
      results = [];
      for (k in data) {
        v = data[k];
        results.push(k + " = " + v);
      }
      return results;
    })()).join('<br>');
    return bean.root.style.backgroundColor = data.connected ? '#ddddff' : '#ffdddd';
  };

  logBean = function(id, msg) {
    var bean, d, stamp;
    bean = beans[id];
    d = new Date();
    stamp = d.toTimeString().slice(0, 8);
    bean.log.appendChild(document.createTextNode("[" + stamp + "] " + msg));
    bean.log.appendChild(document.createElement('br'));
    if (bean.log.children.length > 100) {
      bean.log.firstChild.remove();
      bean.log.firstChild.remove();
    }
    bean.log.scrollTop = bean.log.scrollHeight;
    if (msg === 'connecting' || msg === 'waiting to connect') {
      return bean.root.style.backgroundColor = '#ffffdd';
    }
  };

  ref = '1A 2A 3A 4A 1B 2B 3B 4B'.split(' ');
  for (i = 0, len = ref.length; i < len; i++) {
    k = ref[i];
    addBean(k);
  }

}).call(this);
