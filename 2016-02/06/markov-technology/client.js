// Generated by CoffeeScript 1.10.0
(function() {
  var $, addLinks, buffercache, context, i, k, len, makeNode, maybeFetch, n, nodeProto, play, ref;

  $ = document.querySelector.bind(document);

  context = new (window.AudioContext || window.webkitAudioContext);

  buffercache = {};

  maybeFetch = function(src) {
    if (buffercache[src]) {
      return Promise.resolve(buffercache[src]);
    } else {
      return fetch(src).then(function(response) {
        return response.arrayBuffer();
      }).then(function(audioData) {
        return new Promise(function(accept) {
          return context.decodeAudioData(audioData, accept);
        });
      }).then(function(buffer) {
        buffercache[src] = buffer;
        return buffer;
      });
    }
  };

  play = function(src, at) {
    return maybeFetch(src).then(function(buffer) {
      var node;
      node = context.createBufferSource();
      node.buffer = buffer;
      node.connect(context.destination);
      if (at) {
        node.start(at);
      } else {
        node.start();
      }
      return node;
    });
  };

  nodeProto = {
    display: function() {
      var i, l, len, ref, total;
      total = 0;
      ref = this.links;
      for (i = 0, len = ref.length; i < len; i++) {
        l = ref[i];
        total += l.weight;
      }
      return (this.name + " â‡’ ") + ((function() {
        var j, len1, ref1, ref2, results;
        ref1 = this.links;
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          l = ref1[j];
          results.push(((ref2 = l.next) != null ? ref2.name : void 0) + " (" + (Math.round(l.weight / total * 100)) + "%)");
        }
        return results;
      }).call(this)).join(', ');
    },
    play: function(at) {
      if (at == null) {
        at = context.currentTime + 0.5;
      }
      console.log("Playing", this.src, "at", at);
      setTimeout((function(_this) {
        return function() {
          $('#log').innerHTML += _this.display() + '<br>';
          return window.scrollTo(0, document.body.scrollHeight);
        };
      })(this), (at - context.currentTime) * 1000);
      return play(this.src, at).then((function(_this) {
        return function(audio) {
          var scheduled, time;
          time = audio.buffer.duration * 1000 - 500;
          scheduled = at + audio.buffer.duration;
          setTimeout(function() {
            var ref;
            console.log("Timer fired for next load");
            return (ref = _this.getNext()) != null ? ref.play(scheduled) : void 0;
          }, time);
          return audio.onended = _this.ended.bind(_this);
        };
      })(this));
    },
    ended: function() {
      return console.log("Finished", this.src);
    },
    getNext: function() {
      var cur, i, len, link, rand, ref, total;
      total = this.links.reduce((function(total, link) {
        return total + link.weight;
      }), 0);
      rand = Math.random() * total;
      cur = 0;
      ref = this.links;
      for (i = 0, len = ref.length; i < len; i++) {
        link = ref[i];
        cur += link.weight;
        if (rand <= cur) {
          return link.next;
        }
      }
      return null;
    },
    link: function(nexts, weight) {
      var i, len, next;
      if (weight == null) {
        weight = 1;
      }
      if (!Array.isArray(nexts)) {
        nexts = [nexts];
      }
      for (i = 0, len = nexts.length; i < len; i++) {
        next = nexts[i];
        this.links.push({
          next: next,
          weight: weight
        });
      }
      return this;
    }
  };

  makeNode = function(src) {
    var o;
    o = Object.create(nodeProto);
    o.src = src;
    o.links = [];
    o.name = src.split('/').pop().split('.')[0];
    return o;
  };

  n = {};

  ref = ['intro', 'intro2', 'tricka_1_intro', 'tricka_1_intro2', 'tricka_1_plain', 'tricka_1_cmon', 'tricka_1_uh', 'tricka_1_trickawhat', 'tricka_1_tricka_tricka', 'tricka_1_putemup', 'tricka_2_plain', 'tricka_2_uh', 'tricka_2_yeah', 'tricka_2_tricka', 'tricka_2_putemup', 'tricka_2_outro_tricka_cmon', 'tricka_2_outro_what_what', 'tricka_2_outro_putemup', 'instr1_1_intro', 'instr1_1_plain', 'instr1_2_plain', 'instr1_2_outro', 'instr2_1_intro', 'instr2_1', 'instr2_1_scratch', 'instr2_2_1', 'instr2_2_2', 'instr2_2_outro', 'bridge1_1', 'bridge1_2', 'hipstep1_1', 'hipstep1_2', 'hipstep1_2_outro', 'hipstep2_1_intro', 'hipstep2_1_guitar', 'hipstep2_2', 'hipstep2_2_guitar_outro', 'putemup_1', 'putemup_1_intro', 'putemup_2', 'putemup_2_outro', 'bounce_1_intro', 'bounce_1_uh', 'bounce_1_yeah', 'bounce_2_uh', 'bounce_2_yeah', 'bounce_2_outro', 'youknowwhat_1', 'youknowwhat_2', 'youknowwhat_3', 'youknowwhat_outro'];
  for (i = 0, len = ref.length; i < len; i++) {
    k = ref[i];
    n[k] = makeNode("media/" + k + ".mp3");
  }

  addLinks = function() {
    var j, k1, k2, len1, len2, len3, len4, len5, m, p, q, r, ref1, ref2, ref3, ref4, ref5;
    this.intro.link(this.tricka_1_intro);
    this.intro2.link(this.tricka_1_intro2);
    this.tricka_1_intro.link(this.tricka_2_plain);
    this.tricka_1_intro2.link(this.tricka_2_plain);
    ref1 = ['plain', 'cmon', 'uh', 'trickawhat', 'putemup'];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      k1 = ref1[j];
      ref2 = ['plain', 'uh', 'yeah', 'tricka', 'putemup'];
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        k2 = ref2[m];
        if (!(k1 === 'putemup' || k2 === 'putemup')) {
          this["tricka_1_" + k1].link(this["tricka_2_" + k2]);
        }
        this["tricka_2_" + k2].link(this["tricka_1_" + k1]);
      }
      if (k1 !== 'putemup') {
        this["tricka_1_" + k1].link([this.tricka_2_outro_tricka_cmon, this.tricka_2_outro_what_what]);
      }
    }
    this.tricka_1_putemup.link([this.tricka_2_putemup, this.tricka_2_outro_putemup]);
    ref3 = ['tricka_cmon', 'putemup', 'what_what'];
    for (p = 0, len3 = ref3.length; p < len3; p++) {
      k = ref3[p];
      this["tricka_2_outro_" + k].link([this.instr1_1_intro, this.instr2_1_intro, this.bounce_1_intro]);
    }
    this.instr1_1_intro.link(this.instr1_2_plain);
    this.instr1_2_plain.link([this.instr1_1_plain, this.instr2_1]);
    this.instr1_1_plain.link([this.instr1_2_plain, this.instr1_2_outro]);
    this.instr1_2_outro.link([this.bridge1_1, this.intro2]);
    this.instr2_1_intro.link([this.instr2_2_1, this.instr2_2_2]);
    this.instr2_1.link([this.instr2_2_1, this.instr2_2_2]);
    this.instr2_2_1.link([this.instr2_1, this.instr2_1_scratch]);
    this.instr2_2_2.link([this.instr2_1, this.instr2_1_scratch]);
    this.instr2_1_scratch.link(this.instr2_2_outro);
    this.instr2_2_outro.link([this.hipstep1_1, this.hipstep2_1_intro]);
    this.bridge1_1.link(this.bridge1_2);
    this.bridge1_2.link(this.hipstep1_1);
    this.hipstep1_1.link(this.hipstep1_2);
    this.hipstep1_2.link([this.hipstep1_1, this.hipstep2_1_guitar]);
    this.hipstep2_1_intro.link(this.hipstep2_2);
    this.hipstep2_2.link(this.hipstep2_1_guitar);
    this.hipstep2_1_guitar.link(this.hipstep2_2).link(this.hipstep2_2_guitar_outro, 2);
    this.hipstep2_2_guitar_outro.link(this.putemup_1_intro);
    this.putemup_1_intro.link(this.putemup_2);
    this.putemup_2.link(this.putemup_1);
    this.putemup_1.link([this.putemup_2, this.putemup_2_outro]);
    this.putemup_2_outro.link(this.tricka_1_intro);
    this.bounce_1_intro.link([this.bounce_2_yeah, this.bounce_2_uh]);
    this.bounce_1_yeah.link([this.bounce_2_yeah, this.bounce_2_uh]).link(this.bounce_2_outro, 2);
    this.bounce_1_uh.link([this.bounce_2_yeah, this.bounce_2_uh]).link(this.bounce_2_outro, 2);
    this.bounce_2_yeah.link(this.bounce_1_yeah);
    this.bounce_2_uh.link(this.bounce_1_uh);
    this.bounce_2_outro.link(this.youknowwhat_1);
    ref4 = [1, 2, 3];
    for (q = 0, len4 = ref4.length; q < len4; q++) {
      k1 = ref4[q];
      ref5 = [1, 2, 3];
      for (r = 0, len5 = ref5.length; r < len5; r++) {
        k2 = ref5[r];
        if (k1 !== k2) {
          this["youknowwhat_" + k1].link(this["youknowwhat_" + k2]);
        }
      }
      this["youknowwhat_" + k1].link(this.youknowwhat_outro);
    }
    return this.youknowwhat_outro.link(this.tricka_1_intro2);
  };

  addLinks.apply(n);

  n.intro.play();

}).call(this);
